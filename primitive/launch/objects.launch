<?xml version="1.0"?>
<launch>

  <!-- Gazebo & GUI Configuration -->
  <arg name="gazebo"      default="true"  doc="Should the gazebo simulation be launched? Use false in case if you want to include this file and launch gazebo yourself" />
  <arg name="headless"    default="false" doc="Should the gazebo GUI be launched?" />
  <arg name="paused"      default="false" doc="Should the simulation directly be stopped at 0s?" />
  <arg name="world"       default="worlds/empty.world" doc="Filename to a SDF World for gazebo to use" />
  <arg name="rviz"        default="true"  doc="Should RVIz be launched?" />
  <arg name="dyn_reconf"  default="true"  doc="Should dynamic reconfigure be launched?" />

  <!-- Robot Customization -->
  <arg name="arm_id"      default="panda" doc="Name of the panda robot to spawn" />
  <arg name="end_effector"  default=""    doc="What should be mounted of the flange [hand, sphere, peg]?" />
  <arg name="sphere_radius" default="0.05" doc="How large should the sphere be in [m]? " />
  <arg name="mu"          default="0.2"   doc="What should the coefficient of friction be? " />
  <arg name="controller"  default="hybrid_impedance_wrench_controller"     doc="Which example controller should be started? (One of {cartesian_impedance,model,force}_example_controller)" />
  <!-- <arg name="controller"  default="cartesian_impedance_example_controller"     doc="Which example controller should be started? (One of {cartesian_impedance,model,force}_example_controller)" /> -->
  <arg name="x"           default="0"   doc="How far forward to place the base of the robot in [m]?" />
  <arg name="y"           default="0"    doc="How far leftwards to place the base of the robot in [m]?" />
  <arg name="z"           default="0"     doc="How far upwards to place the base of the robot in [m]?" />
  <arg name="roll"        default="0"     doc="How much to rotate the base of the robot around its X-axis in [rad]?" />
  <arg name="pitch"       default="0"     doc="How much to rotate the base of the robot around its Y-axis in [rad]?" />
  <arg name="yaw"         default="0"     doc="How much to rotate the base of the robot around its Z-axis in [rad]?" />
  <arg name="initial_joint_positions"
       doc="Initial joint configuration of the panda. Specify as a list of name/value pairs in form of '-J [name-of-joint] [value-in-rad]'. Default is a 90 degree bend in the elbow"
       default="-J $(arg arm_id)_joint1 0
                -J $(arg arm_id)_joint2 0
                -J $(arg arm_id)_joint3 0
                -J $(arg arm_id)_joint4 -1.57079632679
                -J $(arg arm_id)_joint5 0
                -J $(arg arm_id)_joint6 1.57079632679
                -J $(arg arm_id)_joint7 0.785398163397"
       />
  <include file="$(find screwing_simulation)/launch/world_loader.launch" if="$(arg gazebo)">
    <arg name="world_name" value="$(arg world)"/>
    <arg name="paused" value="true"/>
    <arg name="gui" value="$(eval not arg('headless'))"/>
    <arg name="use_sim_time" value="true"/>
  </include>

  <group ns="$(arg arm_id)">
    <!-- OG robot description loading -->
    <group if="$(eval end_effector == 'peg')">
      <rosparam command="load" file="$(find screwing_simulation)/config/peg_param.yaml" />

      <!-- publish tfs of hole which can be respawned... -->
      <!-- <param name="hole_description" command="cat $(find franka_description)/robots/hole.urdf"/>
      <node name="hole_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"> 
            <param name="robot_description" value="30"/>
      </node> -->
    </group>

    <group if="$(eval end_effector == 'sphere')">
      <rosparam command="load" file="$(find screwing_simulation)/config/sphere_param.yaml" />
    </group>

    <param name="robot_description"
                command="xacro $(find franka_description)/robots/panda_arm_attachments.urdf.xacro
                      gazebo:=true
                      end_effector:=$(arg end_effector)
                      radius:=$(arg sphere_radius)
                      mu:=$(arg mu)
                      arm_id:=$(arg arm_id)
                      xyz:='$(arg x) $(arg y) $(arg z)'
                      rpy:='$(arg roll) $(arg pitch) $(arg yaw)'"/>

    <!-- <param name="publish_diagnostic" type="bool" value="true"/> -->

    <rosparam file="$(find screwing_simulation)/config/franka_hw_gazebo.yaml" subst_value="true" />
    <rosparam file="$(find screwing_simulation)/config/franka_gazebo_controllers.yaml" subst_value="true" />

    <param name="m_ee" value="0.76" if="$(eval end_effector == 'hand')" />


    <node name="$(arg arm_id)_model_spawner"
          pkg="gazebo_ros"
          type="spawn_model"
          if="$(arg paused)"
          args="-param robot_description -urdf -model $(arg arm_id)
                $(arg initial_joint_positions)
                ">
    </node>
    <node name="$(arg arm_id)_model_spawner"
          pkg="gazebo_ros"
          type="spawn_model"
          unless="$(arg paused)"
          args="-param robot_description -urdf -model $(arg arm_id) -unpause
                $(arg initial_joint_positions)
                ">
    </node>

    <!-- spawn the static hole 
    <node if="$(arg use_peg)" pkg="gazebo_ros" type="spawn_model" name="spawn_hole" args="-file $(find franka_description)/robots/hole.urdf -urdf -x 0.5 -y 0 -z 0 -model hole" />
    <node pkg="tf2_ros" type="static_transform_publisher" name="hole_base_broadcaster" args="0.5 0 0 0 0 3.14 /world /hole_base"/>
    <node pkg="tf2_ros" type="static_transform_publisher" name="hole_top_broadcaster" args="0.5 0 0.12 0 0 3.14 /world /hole_top"/>
    -->

    <!-- Spawn required ROS controllers -->
    <node pkg="controller_manager"
          type="spawner"
          name="$(arg arm_id)_gripper_spawner"
          if="$(eval end_effector == 'hand')"
          args="franka_gripper"
          respawn="false"
    />

    <!-- <node pkg="controller_manager"
          type="spawner"
          name="$(arg arm_id)_controller_spawner"
          respawn="false" output="screen"
          args="franka_state_controller $(arg controller)"
    /> -->

    <node pkg="controller_manager"
          type="spawner"
          name="$(arg arm_id)_state_controller_spawner"
          respawn="false" output="screen"
          args="franka_state_controller_custom"
    />

    <node pkg="controller_manager"
          type="spawner"
          name="$(arg arm_id)_controller_spawner"
          respawn="false" output="screen"
          args="$(arg controller)"
    />

    <remap to="hybrid_impedance_wrench_controller/pose_wrench_desired" from="pose_wrench_desired" />

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher">
      <rosparam param="source_list">[franka_state_controller_custom/joint_states, franka_gripper/joint_states] </rosparam>
      <param name="rate" value="30"/>
    </node>

    <!-- Start only if cartesian_impedance_example_controller -->
    <node name="interactive_marker"
          pkg="screwing_franka_controllers"
          type="interactive_marker.py"
          if="$(eval arg('controller') == 'hybrid_impedance_wrench_controller')">
      <param name="link_name" value="$(arg arm_id)_link0" />
    </node>

  </group>

  <group ns="primitives">
    <param name="primitive_description" command="xacro $(find franka_description)/robots/shape.urdf.xacro" />
    <node name="primitive_state_publisher"
          pkg="robot_state_publisher"
          type="robot_state_publisher">
          <remap from="robot_description" to="primitive_description" />
     </node>

     <node name="primitive_model_spawner"
           pkg="gazebo_ros"
           type="spawn_model"
           args="-param primitive_description -urdf -model primitive">
     </node>
  </group>

  <node  pkg="rviz" type="rviz" output="screen" name="rviz" args="-d $(find screwing_simulation)/config/franka_gazebo_description_with_marker.rviz" if="$(arg rviz)"/>
  <node  pkg="rqt_reconfigure" type="rqt_reconfigure" output="screen" name="rqt_reconf" if="$(arg dyn_reconf)"/>

</launch>
